# Better results after I figured out proper use of pragmas in code

#
# OpenMP 12 thread, n=500, epsilon = 1e-6, maxiter = 100k, c=100
#

45300, 0.0000010729
45400, 0.0000010729
45500, 0.0000010729

Iteration Complete. Total Iterations: 45568, Time Elapsed: 64.691038 (s)
Writing to "output.csv" ...

#
# OpenMP 12 thread, n=200, epsilon = 1e-6, maxiter = 100k, c=100
# reduction(max: error)

9900, 0.0000011921
10000, 0.0000011921
10100, 0.0000010729

Iteration Complete. Total Iterations: 10171, Time Elapsed: 2.388846 (s)
Writing to "output.csv" ...

#
# CPU single thread, n=200, epsilon = 1e-6, maxiter = 100k
#

9900, 0.0000011921
10000, 0.0000011921
10100, 0.0000010729

Iteration Complete. Time Elapsed: 6.976818 (s)
Writing to "output.csv" ...

#
# OpenMP 12 thread, n=200, epsilon = 1e-6, maxiter = 100k, c=100
# no reduction

9900, 0.0000011921
10000, 0.0000011921
10100, 0.0000010729

Iteration Complete. Total Iterations: 10155, Time Elapsed: 7.495504 (s)
Writing to "output.csv" ...

tiger@jungle ~/Projects/Assorted/OpenACC Intro $ g++ -Wall -ansi -pedantic -fPIC -std=c++11 relax.cc -o relax -fopenmp -lpthread -D OPENMP
tiger@jungle ~/Projects/Assorted/OpenACC Intro $ ./relax -n=50
Initialization Complete. Starting iteration...

0, 0.5000000000
100, 0.0031499565
200, 0.0012370348
300, 0.0004518032
400, 0.0001630187
500, 0.0000587106
600, 0.0000212193
700, 0.0000076294
800, 0.0000028014
900, 0.0000010133
Iteration Complete. Total Iterations: 904, Time Elapsed: 0.049459 (s)
Writing to "output.csv" ...

tiger@jungle ~/Projects/Assorted/OpenACC Intro $ ./relax -n=20
Initialization Complete. Starting iteration...

0, 0.5000000000
100, 0.0001245141
Iteration Complete. Total Iterations: 182, Time Elapsed: 0.030710 (s)
Writing to "output.csv" ...

tiger@jungle ~/Projects/Assorted/OpenACC Intro $ g++ -Wall -ansi -pedantic -fPIC -std=c++11 relax.cc -o relax
tiger@jungle ~/Projects/Assorted/OpenACC Intro $ ./relax -n=50
Initialization Complete. Starting iteration...

0, 0.5000000000
100, 0.0031499565
200, 0.0012370348
300, 0.0004518032
400, 0.0001630187
500, 0.0000587106
600, 0.0000212193
700, 0.0000076294
800, 0.0000028014
900, 0.0000010133
Iteration Complete. Time Elapsed: 0.094551 (s)
Writing to "output.csv" ...

tiger@jungle ~/Projects/Assorted/OpenACC Intro $ ./relax -n=20
Initialization Complete. Starting iteration...

0, 0.5000000000
100, 0.0001245141
Iteration Complete. Time Elapsed: 0.003311 (s)
Writing to "output.csv" ...

#
# OpenMP 12 thread, n=1000, epsilon = 1e-6, maxiter = 100k, c=100
# reduction(max: error)
#

127200, 0.0000010729
127300, 0.0000010729
127400, 0.0000010133

Iteration Complete. Total Iterations: 127460, Time Elapsed: 668.512768 (s)
Writing to "output.csv" ...

#
# OpenMP 12 thread, n=300, epsilon = 1e-6, maxiter = 100k, c=100
# reduction(max: error)
#

19800, 0.0000011325
19900, 0.0000010729
20000, 0.0000010729
Iteration Complete. Total Iterations: 20029, Time Elapsed: 10.755093 (s)
Writing to "output.csv" ...

#
# CPU single thread, n=300, epsilon = 1e-6, maxiter = 100k
#

19800, 0.0000011325
19900, 0.0000010729
20000, 0.0000010729

Iteration Complete. Total Iterations: 20029, Time Elapsed: 31.077145 (s)
Writing to "output.csv" ...


#
# OpenACC First attempt n=200
#

9900, 0.0000011921
10000, 0.0000011921
10100, 0.0000010729
Iteration Complete. Total Iterations: 10171, Time Elapsed: 465.628510 (s)
Writing to "output.csv" ...

# suuuper bad. only using #pragma acc kernels, and parallel independnent Very likely something wonky going on with mem copies, etc and atomics, will check.


####
#### 2015-11-24
####


First compile of p4a port:

    108, Generating copy(A[:])
         Generating copyout(Anew[:])
         Generating copy(error,_T24867688)
    111, Scalar last value needed after loop for error at line 134
         Accelerator restriction: scalar variable live-out from loop: error,_T24867688
         Accelerator scalar kernel generated
    113, Complex loop carried dependence of A->,Anew-> prevents parallelization
         Complex loop carried dependence of  prevents parallelization
         Scalar last value needed after loop for error at line 134
         Accelerator restriction: scalar variable live-out from loop: error,_T24867688
    124, Loop is parallelizable
    126, Complex loop carried dependence of Anew->,A-> prevents parallelization
         Inner sequential loop scheduled on accelerator
         Accelerator kernel generated
         Generating Tesla code
        124, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */
std::abs(float):
     28, include "cmath"
          21, include "cmath"
               88, Generating implicit acc routine seq
const T1 & std::max<float>(const T1 &, const T1 &):
     27, include "iostream"
          39, include "ostream"
               38, include "ios"
                    40, include "char_traits.h"
                         39, include "stl_algobase.h"
                             217, Generating implicit acc routine seq

after switching to his exact code (part 2)

113, Generating copy(A[:],Anew[:])
    115, Generating copy(_T39691256,error)
    123, Complex loop carried dependence of Anew-> prevents parallelization
         Loop carried dependence of Anew-> prevents parallelization
         Loop carried dependence of Anew-> prevents vectorization
         Loop carried backward dependence of Anew-> prevents vectorization
         Complex loop carried dependence of  prevents parallelization
         Scalar last value needed after loop for error at line 149
         Accelerator restriction: scalar variable live-out from loop: error,_T39691256
         Accelerator scalar kernel generated
    125, Complex loop carried dependence of Anew-> prevents parallelization
         Complex loop carried dependence of  prevents parallelization
         Scalar last value needed after loop for error at line 149
         Accelerator restriction: scalar variable live-out from loop: error,_T39691256
    140, Loop carried dependence of A-> prevents parallelization
         Loop carried backward dependence of A-> prevents vectorization
    142, Loop is parallelizable
         Accelerator kernel generated
         Generating Tesla code
        142, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */
std::abs(float):
     28, include "cmath"
          21, include "cmath"
               88, Generating implicit acc routine seq
const T1 & std::max<float>(const T1 &, const T1 &):
     27, include "iostream"
          39, include "ostream"
               38, include "ios"
                    40, include "char_traits.h"
                         39, include "stl_algobase.h"
                             217, Generating implicit acc routine seq

pile of garbage, fuck this for now. I'll post about my troubles and see if someone says something interesting. It shouldn't be this hard to get it to work, at this rate I may as well write the whole thing in CUDA. (besides the point)

Let's do some nice benching on the OMP/single thread data and see what happens.

used 1c96aecd493aad0a8d1b4b64ddf12bc430af63c2 as a basis for the p4a code.

n Iterations  jackson_1 jackson_omp w/o reduce  Iterations  p4a p4a_omp w/ reduce
128 3232  1.129339  0.593687  1.1516346 7600  1.88803 2.322734  0.645108
256 9356  13.607039 4.331593  9.704246  14351 12.90465  14.003855 3.752618
512 22954 139.265152  34.154006 80.828234 20098 71.627769 73.017763 16.038981
1024  30500 1064.525757 266.677273  474.060816  23051 336.5859  284.048328  67.629881



#
# 2015-11-24
#

Implemented p4a Up to here...http://devblogs.nvidia.com/parallelforall/openacc-example-part-2/

still doesn't compile correctly, even after implementing error change:

    118, Generating copy(A[:])
         Generating create(Anew[:])
    127, Parallelization would require privatization of array Anew[:]
         Accelerator kernel generated
         Generating Tesla code
    148, Loop carried dependence of A-> prevents parallelization
         Loop carried backward dependence of A-> prevents vectorization
    150, Loop is parallelizable
         Accelerator kernel generated
         Generating Tesla code
        150, #pragma acc loop gang, vector(128) /* blockIdx.x threadIdx.x */
std::abs(float):
     28, include "cmath"
          21, include "cmath"
               88, Generating implicit acc routine seq


1e-6 converges for 1024

131500, 0.0000010729
131600, 0.0000010729
Iteration Complete. Total Iterations: 131679, Time Elapsed: 166.224335 (s)
Writing to "output csvs" ...

great!!!!!

step 3 optimizations:

g++ -Wall -ansi -pedantic -fPIC -std=c++11 -o p4a p4allrework.cc
g++ -Wall -ansi -pedantic -fPIC -std=c++11 -o p4a_omp p4allrework.cc -fopenmp -lpthread -D OMP
pgc++ -acc -ta=nvidia:managed,time -Minfo=accel -fast -std=c++11 -D OACC -o p4a_oacc p4allrework.cc
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 173)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
PGCC-S-0053-Illegal use of void type (p4allrework.cc: 114)
main:
    119, Generating copy(A[:])
         Generating create(Anew[:])
    130, Complex loop carried dependence of A->,Anew-> prevents parallelization
         Parallelization would require privatization of array Anew[:]
         Sequential loop scheduled on host
    135, Complex loop carried dependence of A->,Anew-> prevents parallelization
         Inner sequential loop scheduled on host
         Accelerator scalar kernel generated
    154, Generating copy([:])
    157, Complex loop carried dependence of Anew->,A-> prevents parallelization
         Parallelization would require privatization of array A[:]
         Sequential loop scheduled on host
    162, Complex loop carried dependence of Anew->,A-> prevents parallelization
         Inner sequential loop scheduled on host
         Accelerator scalar kernel generated
PGCC/x86 Linux 15.7-0: compilation completed with severe errors
make: *** [p4a_oacc] Error 2

from here: https://github.com/parallel-forall/code-samples/blob/master/posts/002-openacc-example/step3/laplace2d.c
